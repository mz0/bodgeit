<project basedir="." default="compile">

	<!-- environment specific configuration, change it for your setup -->
<property file="local.properties"/>
<dirname file="${ant.file}" property="bodgeit.home"/>

<target name="hack">
	<echo message="
		ant.file = ${ant.file}
		ant.home = ${ant.home}
		ant.version = ${ant.version}
		bodgeit.home = ${bodgeit.home}
		"/>
	</target>

<path id="compile.cp">
	<fileset dir="lib"> <include name="*.jar" /></fileset>
	</path>

<target name="compile">
	<mkdir dir="build/site/WEB-INF/classes"/>
	<javac destdir="build/site/WEB-INF/classes" srcdir="src/com" classpathref="compile.cp" includeAntruntime="no"/>
	</target>

<target name="clean"> <delete dir="build"/> </target>

<target name="build" depends="compile">
	<copy toDir="build/site"><fileset dir="WebContent" includes="**/*"/></copy>
	<mkdir dir="build/site/WEB-INF/lib"/>
	<copy toDir="build/site/WEB-INF/lib"><fileset dir="lib" includes="**/*.jar"/></copy>
	<delete file="build/bodgeit.war"/>
	<delete file="build/site/WEB-INF/web.xml"/>
	<war destfile="build/bodgeit.war" webxml="meta/web.xml">
		<fileset dir="build/site"/>
	</war>
	</target>

<target name="deploy" depends="build">
	<delete dir="${deploy.dir}/bodgeit"/>
	<copy file="build/bodgeit.war" tofile="${deploy.dir}/bodgeit.war"/>
	</target>

<path id="test.cp">
	<pathelement location="lib/commons-lang3.jar"/>
	<pathelement location="testlib/selenium-server-standalone.jar"/>
	<pathelement location="build"/>
	</path>

<target name="mktest">
	<mkdir dir="build/test"/>
	<javac destdir="build" srcdir="src/test" classpathref="test.cp" includeAntruntime="no"/>
	</target>


<target name="test" description="check WebDriver-Firefox integration using the running site" depends="deploy,mktest">
<echo message="FIXME: Tomcat with deployed WAR must be running!"/>
	<junit printsummary="yes" haltonerror="yes"> <formatter type="xml"/>
	<classpath><path refid="test.cp"/></classpath>
        <test todir="build" name="test.FunctionalTest"/>
	</junit>
	</target>

<target name="zap-proxy-tests">
        <junit printsummary="yes" fork="yes"> <formatter type="xml"/> <formatter type="plain"/>
	<sysproperty key="zap.proxy" value="${zap.addr}:${zap.port}"/>
	<sysproperty key="zap.targetApp" value="${zap.targetApp}"/>
	<classpath> <path refid="test.cp"/> <pathelement location="testlib/zap-api.jar"/> </classpath>
	<test todir="build" name="test.FunctionalZAP"/>
	</junit>
	</target>

	<target name="zap-spider">
		<java classname="org.zaproxy.clientapi.core.ClientApiMain">
			<arg value="spider"/>
			<arg value="url=${zap.targetApp}"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>

		<classpath>
		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
		</classpath>
		</java>
	</target>

	<target name="zap-ascan">
		<java classname="org.zaproxy.clientapi.core.ClientApiMain">
			<arg value="activeScanSubtree"/>
			<arg value="url=${zap.targetApp}"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>
			
			<classpath>
        		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
			</classpath>
		</java>
	</target>

	<target name="zap-saveSession">
		<tstamp>
			<format property="timestamp" pattern="yyyy-MM-dd-HH-mm-ss"/>
		</tstamp>
		<java classname="org.zaproxy.clientapi.core.ClientApiMain">
			<arg value="saveSession"/>
			<arg value="sessionName=${basedir}/bodgeit-${timestamp}"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>
			
			<classpath>
        		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
			</classpath>
		</java>
	</target>

	<target name="zap-showAlerts">
		<java classname="org.zaproxy.clientapi.core.ClientApiMain" failonerror="true">
			<arg value="showAlerts"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>
			
			<classpath>
        		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
			</classpath>
		</java>
	</target>

	<target name="zap-checkAlerts">
		<!-- alertsFile.xml should fail while allAlertsFile.xml should succeed --> 
		<property name="alertsfile" value="${bodgeit.home}/alertsFile.xml"/>
		
		<java classname="org.zaproxy.clientapi.core.ClientApiMain" failonerror="true">
			<arg value="checkAlerts"/>
			<arg value="alertsFile=${alertsfile}"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>
			
			<classpath>
        		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
			</classpath>
		</java>
	</target>

	<target name="zap-stop">
		<java classname="org.zaproxy.clientapi.core.ClientApiMain">
			<arg value="stop"/>
			<arg value="zapaddr=${zap.addr}"/>
			<arg value="zapport=${zap.port}"/>
			<arg value="debug=true"/>
			
			<classpath>
        		<fileset dir="testlib"> <include name="zap-api*.jar" /> </fileset>
			</classpath>
		</java>
	</target>

	<target name="zap-test-daemon" 
		description="Starts ZAP as a daemon, run the Bodgeit tests through it and then scan for vulnerabilities">
		<!-- Your servlet engine must be running when you start this test -->

		<!-- Start ZAP in background -->
		<ant antfile="zap-build.xml" target="startZapDaemon" inheritAll="false"/>

		<antcall target="zap-test"/>		
	</target>

	<target name="zap-test-ui"
		description="Starts the ZAP UI, run the Bodgeit tests through it and then scan for vulnerabilities">
		<!-- Your servlet engine must be running when you start this test -->

		<!-- Start ZAP with UI -->
		<ant antfile="zap-build.xml" target="startZap" inheritAll="false"/>

		<antcall target="zap-test"/>		
	</target>

<target name="zap-test" description=
 "Runs the Bodgeit tests through ZAP (which must be running) and then scan for vulnerabilities">
<echo message="Tomcat with deployed WAR must be running!"/>
<echo message="ZAP must be running when you start this test. You may use testlib/zapRun."/>
<echo message="ZAP will not be stopped if test fails, you may try 'zap-stop' target to do that."/>
		<antcall target="zap-proxy-tests"/>	<sleep seconds="5"/>
		<antcall target="zap-spider"/>		<sleep seconds="5"/>
		<antcall target="zap-ascan"/>		<sleep seconds="3"/>
		<antcall target="zap-saveSession"/>
		<!-- Give the passive scanner thread a chance to catch up -->
		<sleep seconds="5"/>
		<antcall target="zap-checkAlerts"/>
		<antcall target="zap-stop"/>
	</target>

	<target name="zap-test-tasks-daemon"
		description="Starts ZAP as a daemon, run the Bodgeit tests through it and then scan for vulnerabilities using Ant tasks">
		<!-- Your servlet engine must be running when you start this test -->
		<!-- 
			You must also have configured Eclipse to use the ZAP client jar as per the 
			instructions in zap-build.xml
		-->

		<!-- Start ZAP in background -->
		<ant antfile="zap-build.xml" target="startZapDaemon" inheritAll="false"/>
		<antcall target="zap-test-tasks"/>		
	</target>

	<target name="zap-test-tasks-ui" description=
 "Starts the ZAP UI, run the Bodgeit tests through it and then scan for vulnerabilities using Ant tasks">
		<!-- Your servlet engine must be running when you start this test -->
		<!-- You must also have configured Eclipse to use the ZAP client jar as per the 
			instructions in zap-build.xml -->
		<!-- Start ZAP with UI -->
		<ant antfile="zap-build.xml" target="startZap" inheritAll="false"/>
		<antcall target="zap-test-tasks"/>		
	</target>

	
	<target name="zap-test-tasks" 
		description="Runs the Bodgeit tests through ZAP (which must be running) and then scan for vulnerabilities using Ant tasks">
		<!-- ZAP must be running when you start this test -->
		<!-- You must also have configured Eclipse to use the ZAP client jar as per the 
			instructions in zap-build.xml -->
		<antcall target="zap-proxy-tests"/>		
		<sleep seconds="5"/>

		<!-- Spider the whole site -->
		<ant antfile="zap-build.xml" target="spider" inheritAll="false"/>

		<sleep seconds="5"/>

		<!-- Active scan the whole site -->
		<ant antfile="zap-build.xml" target="activescan" inheritAll="false"/>

		<sleep seconds="3"/>

		<!-- Save to a timestamped session file -->
		<tstamp>
			<format property="timestamp" pattern="yyyy-MM-dd-HH-mm-ss"/>
		</tstamp>
		<ant antfile="zap-build.xml" target="savesession" inheritAll="false">
			<!-- Override the session name -->
			<property name="zap.session" value="${bodgeit.home}/build/bodgeit-${timestamp}"/>
		</ant>

		<!-- Give the passive scanner thread a chance to catch up -->
		<sleep seconds="5"/>
		
		<!-- Check the alerts logged -->
		<ant antfile="zap-build.xml" target="alertcheck" inheritAll="false"/>
		
		<!--
		Note that if the above test fails ZAP will not be stopped, so you will need to call the stopZap target directly.
		-->

		<ant antfile="zap-build.xml" target="stopZap" inheritAll="false"/>
	</target>
</project>
